// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.IcoExRate.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IcoExRateAPI.
    /// </summary>
    public static partial class IcoExRateAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IIcoExRateAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IIcoExRateAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='market'>
            /// Possible values include: 'Lykke', 'Kraken', 'Bitfinex'
            /// </param>
            /// <param name='pair'>
            /// Possible values include: 'BTCUSD', 'ETHUSD'
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            public static RateResponse ApiRatesByMarketByPairByDateTimeUtcGet(this IIcoExRateAPI operations, Market market, Pair pair, System.DateTime dateTimeUtc)
            {
                return operations.ApiRatesByMarketByPairByDateTimeUtcGetAsync(market, pair, dateTimeUtc).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='market'>
            /// Possible values include: 'Lykke', 'Kraken', 'Bitfinex'
            /// </param>
            /// <param name='pair'>
            /// Possible values include: 'BTCUSD', 'ETHUSD'
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RateResponse> ApiRatesByMarketByPairByDateTimeUtcGetAsync(this IIcoExRateAPI operations, Market market, Pair pair, System.DateTime dateTimeUtc, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRatesByMarketByPairByDateTimeUtcGetWithHttpMessagesAsync(market, pair, dateTimeUtc, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pair'>
            /// Possible values include: 'BTCUSD', 'ETHUSD'
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            public static IList<RateResponse> ApiRatesByPairByDateTimeUtcGet(this IIcoExRateAPI operations, Pair pair, System.DateTime dateTimeUtc)
            {
                return operations.ApiRatesByPairByDateTimeUtcGetAsync(pair, dateTimeUtc).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pair'>
            /// Possible values include: 'BTCUSD', 'ETHUSD'
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RateResponse>> ApiRatesByPairByDateTimeUtcGetAsync(this IIcoExRateAPI operations, Pair pair, System.DateTime dateTimeUtc, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRatesByPairByDateTimeUtcGetWithHttpMessagesAsync(pair, dateTimeUtc, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pair'>
            /// Possible values include: 'BTCUSD', 'ETHUSD'
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            public static AverageRateResponse ApiRatesByPairByDateTimeUtcAverageGet(this IIcoExRateAPI operations, Pair pair, System.DateTime dateTimeUtc)
            {
                return operations.ApiRatesByPairByDateTimeUtcAverageGetAsync(pair, dateTimeUtc).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pair'>
            /// Possible values include: 'BTCUSD', 'ETHUSD'
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AverageRateResponse> ApiRatesByPairByDateTimeUtcAverageGetAsync(this IIcoExRateAPI operations, Pair pair, System.DateTime dateTimeUtc, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRatesByPairByDateTimeUtcAverageGetWithHttpMessagesAsync(pair, dateTimeUtc, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            public static IList<RateResponse> ApiRatesByDateTimeUtcGet(this IIcoExRateAPI operations, System.DateTime dateTimeUtc)
            {
                return operations.ApiRatesByDateTimeUtcGetAsync(dateTimeUtc).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RateResponse>> ApiRatesByDateTimeUtcGetAsync(this IIcoExRateAPI operations, System.DateTime dateTimeUtc, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRatesByDateTimeUtcGetWithHttpMessagesAsync(dateTimeUtc, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            public static IList<AverageRateResponse> ApiRatesByDateTimeUtcAverageGet(this IIcoExRateAPI operations, System.DateTime dateTimeUtc)
            {
                return operations.ApiRatesByDateTimeUtcAverageGetAsync(dateTimeUtc).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dateTimeUtc'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AverageRateResponse>> ApiRatesByDateTimeUtcAverageGetAsync(this IIcoExRateAPI operations, System.DateTime dateTimeUtc, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRatesByDateTimeUtcAverageGetWithHttpMessagesAsync(dateTimeUtc, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
